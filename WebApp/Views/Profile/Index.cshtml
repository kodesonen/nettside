@model WebApp.Models.User.ProfileModel;

@{ ViewData["Title"] = @Model.Name; }

<div class="profile-site-header">
	<div class="wrapper">
		<div class="profile-site-image">
			<img src="~/img/team/sira.png">

			<div class="profile-site-info-links">
				<center>
					@if (!string.IsNullOrEmpty(@Model.GitHub))
					{
						<a href="@Model.GitHub" target="_blank"><i class="fab fa-github-square"></i></a>
					}

					@if (!string.IsNullOrEmpty(@Model.LinkedIn))
					{
						<a href="@Model.LinkedIn" target="_blank"><i class="fab fa-linkedin"></i></a>
					}
				</center>
			</div>
		</div>

		<div class="profile-site-desc">
			<div class="wrapper">
				<div class="profile-site-name">
					<h1>@Model.Name</h1>

					@if (!string.IsNullOrEmpty(@Model.Website))
					{
						<a href="@Model.Website" target="_blank">
							<div id="kodesonen-button2" class="button profile-site-name-button">
								Besøk nettside <i class="fas fa-external-link-alt"></i>
							</div>
						</a>
					}
				</div>

				<div class="profile-site-info">
					@if (!string.IsNullOrEmpty(@Model.Study))
					{
						<span><i class="fas fa-graduation-cap"></i> @Model.Study (@Model.University)</span>
					}

					@if (!string.IsNullOrEmpty(@Model.StaffPosition))
					{
						<span><i class="fas fa-briefcase"></i> @Model.StaffPosition</span>
					}
				</div>

				<div class="profile-site-content"><br/>
					@if (!string.IsNullOrEmpty(@Model.Description))
					{
						<p>@Model.Description</p>
					}
					else
					{
						<p>Velkommen til @Model.Name sin profil!</p>
					}
				</div>
			</div>
		</div>
	</div>
</div>

<div class="profile-site-archive">
	@if (Model.WrittenCourses.Any())
	{
		<h2>Publiserte kurs</h2>
		<ul class="profile-archive">
			@foreach (var course in Model.WrittenCourses)
			{
				<li><a href="#">@course.Name</a> <span>(99)</span></li>
			}
		</ul>

		<br><hr><br>
	}

	<h2>Arrangementer</h2>
	<ul class="profile-archive">
		<p>Sirajuddin har ikke deltatt på noen arrangementer enda.</p>
	</ul>
</div>

<div class="profile-site-feed">
	<div class="authorPost-section">
		<h1>LIFO og FIFO abstrakt</h1> 
		<h4>- Januar 14, 2020 </h4> <br> 
		<p>I dette kurset vil vi sammen gå gjennom datastrukturer som gradvis blir mer og mer komplisert. Som eksempler på datastrukturene vil programmering med C++&nbsp; bli brukt, Kodesonen anbefaler derfor at man har gjennomført kurset om innføring av programmering med C++.LIFO"Last In, First Out" er et begrep som som brukes til å beskrive en logisk sekvens. Om vi skulle tenkt abstrakt på dette, så kan vi forstille oss en kø med mennesker. Hvor personen helt til høyre (blå) var denne siste inn i køen og personen (grå) helt til venstre var sist inn i køen.</p>
        <a href="#"><div id="kodesonen-button2" class="button authorPost-button">Les innlegg <i class="fas fa-long-arrow-alt-right"></i></div></a>
	</div>

	<div class="authorPost-section">
		<h1>Stack (LIFO) datastruktur</h1> 
		<h4>- Februar 8, 2020 </h4> <br> 
		<p>I forrige kapittel gikk vi gjennom hva konseptet bak LIFO kjennetegnet, noe vi nå vil basere Stack (eller stakk på norsk) på. Men før vi går inn for å lage denne datastrukturen så er det viktig å gå over enkelte begreper. For når det gjelder en Stack, så bruker vi gjerne begrepene push og pop. Hvor "push" omfatter det å legge noe til i Stack, mens "pop" betegner det å ta noe bort fra Stack. Et eksempel på dette kan være hvordan man stabler tallerkner på et kjøkken. Hvor man da gjerne legger tallerkner oppå hverandre (push) hvis man ønsker å fylle kjøkkenet. Om man derimot skal bruke en tallerken så tar man den øverste (pop).</p>
        <a href="#"><div id="kodesonen-button2" class="button authorPost-button">Les innlegg <i class="fas fa-long-arrow-alt-right"></i></div></a>
	</div>
</div>

<!--
<div class="profile-site-body">
	<div class="wrapper">
		<div class="profile-site-archive">
			<h2>Arkiv</h2>
			<ul class="profile-archive">
				<li><a href="#">Januar 2021</a> <span>(3)</span></li>
				<li><a href="#">Februar 2021</a> <span>(4)</span></li>
				<li><a href="#">Mars 2021</a> <span>(1)</span></li>
			</ul>
		</div>

		<div class="profile-site-feed">
			<div class="authorPost-section">
				<h1>LIFO og FIFO abstrakt</h1> 
				<h4>- Januar 14, 2020 </h4> <br> 
				<p>I dette kurset vil vi sammen gå gjennom datastrukturer som gradvis blir mer og mer komplisert. Som eksempler på datastrukturene vil programmering med C++&nbsp; bli brukt, Kodesonen anbefaler derfor at man har gjennomført kurset om innføring av programmering med C++.LIFO"Last In, First Out" er et begrep som som brukes til å beskrive en logisk sekvens. Om vi skulle tenkt abstrakt på dette, så kan vi forstille oss en kø med mennesker. Hvor personen helt til høyre (blå) var denne siste inn i køen og personen (grå) helt til venstre var sist inn i køen.</p>
            	<a href="#"><div id="kodesonen-button2" class="button authorPost-button">Les innlegg <i class="fas fa-long-arrow-alt-right"></i></div></a>
			</div>

			<div class="authorPost-section">
				<h1>Stack (LIFO) datastruktur</h1> 
				<h4>- Februar 8, 2020 </h4> <br> 
				<p>I forrige kapittel gikk vi gjennom hva konseptet bak LIFO kjennetegnet, noe vi nå vil basere Stack (eller stakk på norsk) på. Men før vi går inn for å lage denne datastrukturen så er det viktig å gå over enkelte begreper. For når det gjelder en Stack, så bruker vi gjerne begrepene push og pop. Hvor "push" omfatter det å legge noe til i Stack, mens "pop" betegner det å ta noe bort fra Stack. Et eksempel på dette kan være hvordan man stabler tallerkner på et kjøkken. Hvor man da gjerne legger tallerkner oppå hverandre (push) hvis man ønsker å fylle kjøkkenet. Om man derimot skal bruke en tallerken så tar man den øverste (pop).</p>
                <a href="#"><div id="kodesonen-button2" class="button authorPost-button">Les innlegg <i class="fas fa-long-arrow-alt-right"></i></div></a>
			</div>
		</div>
	</div>
</div>
-->